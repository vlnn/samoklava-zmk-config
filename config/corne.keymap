/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define LWR LOWER
#define RSE RAISE
#define ADJ ADJUST

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
    quick_tap_ms = <180>;
};

&lt {
    /* flavor = "balanced"; */
    quick_tap_ms = <200>;
    tapping-term-ms = <180>;
};

/ {
        combos {
           compatible = "zmk,combos";
           combo_lpar {
              timeout-ms = <50>;
              key-positions = <25 26>;
              bindings = <&kp LPAR>;
           };

           combo_rpar {
              timeout-ms = <50>;
              key-positions = <33 34>;
              bindings = <&kp RPAR>;
           };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <LOWER RAISE>;
                then-layer = <ADJUST>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &kp Q      &kp W      &kp E       &kp R        &kp T         &kp Y         &kp U        &kp I        &kp O      &kp P         &none
   &none &mt LCTRL A &mt RALT S &mt DEL D &mt LSHFT F  &kp G         &kp H         &mt RSHFT J  &mt RCTRL K  &mt RALT L &mt RCMD SEMI &none
   &none &mt LC(LA(DEL)) Z      &mt LALT X &kp C       &kp V        &kp B         &kp N         &kp M        &kp COMMA    &kp DOT    &kp FSLH      &none
                               &lt RSE ESC &lt LWR QUOT &mt LSHFT SPACE     &mt RSHFT RET &lt RSE BSPC &lt LWR TAB
                        >;
                };
                lower_layer {
                        bindings = <
   &none &kp N1   &kp N2   &kp N3      &kp N4       &kp N5        &kp N6   &kp N7         &kp N8       &kp N9         &kp N0     &none
   &none &kp DEL &kp RALT &kp LCTRL   &kp LSHFT    &none         &kp LEFT &mt RSHFT DOWN &mt RCTRL UP &mt RALT RIGHT &kp RCMD   &none
   &none &none    &kp LALT &none       &kp Y        &none         &kp HOME &kp PG_DN      &kp PG_UP    &mt LALT END   &caps_word &none
                           &lt RSE ESC &lt LWR QUOT &kp SPACE     &mt RSHFT RET &mo RSE &lt LWR TAB
                        >;
                };
                raise_layer {
                        bindings = <
   &none &kp EXCL    &kp AT      &kp HASH     &kp DLLR     &kp PRCNT       &kp CARET    &kp AMPS        &kp KP_MULTIPLY &kp LPAR      &kp RPAR      &none
   &none &mt DEL F1 &mt RALT F2 &mt LCTRL F3 &mt LSHFT F4 &kp F5          &kp MINUS     &mt RSHFT EQUAL &mt RCTRL LBKT  &mt RALT RBKT &mt RCMD BSLH &none
   &none &kp F6      &mt LALT F7 &kp F8       &kp F11       &kp F12         &kp UNDER     &kp PLUS        &kp LBRC        &kp RBRC      &kp PIPE      &none
                                 &lt RSE ESC  &mo LWR      &kp GRAVE       &mt RSHFT RET &lt RSE BSPC    &lt LWR TAB
                        >;
                };
                adjust_layer {
                        bindings = <
   &none &bt BT_CLR   &none        &none        &none        &none            &none           &kp K_MUTE   &none &none &bootloader &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &kp C_BRI_UP    &kp C_VOL_UP &none &none &reset      &none
   &none &bootloader        &none        &none        &none        &none            &kp C_BRI_DN    &kp C_VOL_DN &none &none &none       &none
                                   &none        &none        &none            &none           &none        &none
                        >;
                };
        };
};
