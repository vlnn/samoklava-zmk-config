/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define HOST_OS 2
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/ukrainian.dtsi"

#define DEFAULT 0
#define UA      1
#define LOWER   2
#define RAISE   3
#define ADJUST  4
#define LWR LOWER
#define RSE RAISE
#define ADJ ADJUST

&mt {
    quick-tap-ms = <180>;
    tapping-term-ms = <250>;
};

&lt {
    quick_tap_ms = <200>;
    tapping-term-ms = <180>;
};

// COPY_PASTE around usual pinky-driven keys
ZMK_COMBO(copy,  &kp LG(C), 25 26, ALL)
ZMK_COMBO(paste, &kp LG(V), 26 27, ALL)

// ESC is everywhere I can think of
ZMK_COMBO(escape_combo, &kp ESC, 1 2, ALL)
ZMK_COMBO(escape_combo_a, &kp ESC, 13 14, ALL)
ZMK_COMBO(escape_combo_b, &kp ESC, 14 15 16, ALL)

ZMK_COMBO(combo_lpar, &kp LPAR, 3 4, ALL, 50)
ZMK_COMBO(combo_lbrc, &kp LBRC, 4 5, ALL, 50)
ZMK_COMBO(combo_lbkt, &kp LBKT, 2 3, ALL, 50)
ZMK_COMBO(combo_rpar, &kp RPAR, 7 8, ALL, 50)
ZMK_COMBO(combo_rbrc, &kp RBRC, 6 7, ALL, 50)
ZMK_COMBO(combo_rbkt, &kp RBKT, 8 9, ALL, 50)

ZMK_COMBO(combo_quote, &kp SINGLE_QUOTE, 9 10, ALL, 50) // quotes single and coupled :love:
ZMK_COMBO(combo_ua_kh, &ua_kh, 21 22, ALL, 50) // no keys left for ua_kh, so it gets whole combo :confused:
ZMK_COMBO(combo_comma, &kp COMMA, 33 34, ALL, 50) // workaround for the comma (due to ua extended row)

// activate macOS-mode for helper script
#undef OS_UNICODE_LEAD
#undef OS_UNICODE_TRAIL
#define OS_UNICODE_LEAD &macro_press &kp LALT  // <- macOS compose sequence (must be activated in system preferences)
#define OS_UNICODE_TRAIL &macro_release &kp LALT  // <- Releasing Left-Alt terminates unicode input on macOns

/ {
        behaviors {
            //                 Key positions
            //       0  1  2  3  4  5    6  7  8  9 10 11
            //      12 13 14 15 16 17   18 19 20 21 22 23
            //      24 25 26 27 28 29   30 31 32 33 34 35
            //               36 37 38   39 40 41

            hml: homerow_mods_left {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS_LEFT";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <250>;
                quick-tap-ms = <180>;
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <
                                         6  7  8  9 10
                       13 14 15 16 17   18 19 20 21 22
                          26            30 31 32 33 34
                             36 37 38   39 40 41
                    >;    // <---[[right-hand keys + all homerow mods + all thumbs]]
            };

            ua_hml: homerow_mods_left {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS_LEFT_UA";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <250>;
                quick-tap-ms = <180>;
                hold-trigger-key-positions = <
                                         6  7  8  9 10
                       13 14 15 16      18 19 20 21 22
                          26            30 31 32 33 34
                             36 37 38   39 40 41
                    >;    // <---[[right-hand keys + all homerow mods + all thumbs]]
            };

            hmr: homerow_mods_right {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS_RIGHT";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <250>;
                quick-tap-ms = <180>;
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <
                        1  2  3  4  5
                       13 14 15 16 17    18 19 20 21 22
                       25 26 27 28 29            33
                             36 37 38   39 40 41
                    >;    // <---[[left-hand keys + all homerow mods + all thumbs]]
            };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <LOWER RAISE>;
                then-layer = <ADJUST>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &kp Q        &kp W         &kp E        &kp R         &kp T             &kp Y         &kp U            &kp I           &kp O            &kp P          &none
   &none &hml LALT A  &hml LCTRL S   &hml LCMD D &hml LSHFT F  &kp G             &kp H         &hmr RSHFT J     &hmr RCMD K     &hmr RCTRL L      &hmr RALT SEMI &none
   &none &kp Z        &hml LALT X   &kp C        &kp V         &kp B             &kp N         &kp M            &kp COMMA       &hmr LALT DOT    &kp FSLH       &none
                                    &lt RSE BSPC &lt LWR ESC   &tog UA           &mt RSHFT TAB &lt RSE RET      &lt LWR SPACE
                        >;
                };
                ua_layer {
                         bindings = <
   &none &ua_i_short &ua_ts  &ua_u  &ua_k  &ua_e         &ua_n    &ua_h    &ua_sh   &ua_sch  &ua_z   &none
   &none &ua_f       &ua_i   &ua_v  &kp A  &ua_p         &kp P    &ua_o    &ua_l    &ua_d    &ua_zh  &none
   &none &ua_ya      &ua_ch  &ua_s  &ua_m  &ua_y         &ua_t    &ua_soft &ua_b    &ua_yu   &kp DOT &none
                     &lt RSE BSPC &lt LWR ESC &tog UA    &mt RSHFT TAB &lt RSE RET  &lt LWR SPACE
                        >;
            };
                lower_layer {
                        bindings = <
   &none &kp N1       &kp N2       &kp N3        &kp N4        &kp N5            &kp N6        &kp N7           &kp N8           &kp N9          &kp N0          &none
   &none &kp LALT     &kp LCTRL     &kp LCMD     &kp LSHFT     &none             &none         &hmr RSHFT LEFT  &hmr RCMD DOWN   &hmr RCTRL UP   &hmr RALT RIGHT &none
   &none &none        &kp LALT     &none         &kp Y         &none             &kp HOME      &caps_word       &kp PG_DN        &kp PG_UP       &hmr LALT END   &none
                                   &lt RSE BSPC  &lt LWR ESC   &none             &mt RSHFT TAB &mo RSE          &lt LWR SPACE
                        >;
                };
                raise_layer {
                        bindings = <
   &none &kp EXCL     &kp AT       &kp HASH      &kp DLLR      &kp PRCNT         &kp CARET     &kp AMPS         &kp KP_MULTIPLY  &kp LPAR        &kp RPAR       &none
   &none &hml LALT F1 &hml LCTRL F2 &hml LCMD F3 &hml LSHFT F4 &kp F5            &kp MINUS     &hmr RSHFT EQUAL &hmr RCMD LBKT   &hmr RCTRL RBKT &hmr RALT BSLH &none
   &none &kp F6       &hml LALT F7 &kp F8        &kp F9        &kp F10           &kp UNDER     &kp PLUS         &kp LBRC         &kp RBRC        &kp PIPE       &none
                                   &lt RSE BSPC  &mo LWR       &none             &mt RSHFT TAB &lt RSE RET      &lt LWR SPACE
                        >;
                };
                adjust_layer {
                        bindings = <
   &none &bt BT_CLR   &none        &none        &none         &ua_ie             &none         &ua_g            &none            &none           &bootloader    &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &kp C_BRI_UP  &kp C_VOL_UP     &none            &none           &reset         &none
   &none &none        &none        &none         &none         &none             &kp C_BRI_DN  &kp C_VOL_DN     &none            &none           &none          &none
                                   &none         &none         &none             &none         &none            &none
                        >;
                };
        };
};
